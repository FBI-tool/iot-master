// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: plugin/plugin.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{0}
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *Id) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Buffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Buffer) Reset() {
	*x = Buffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buffer) ProtoMessage() {}

func (x *Buffer) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buffer.ProtoReflect.Descriptor instead.
func (*Buffer) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *Buffer) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Skip    uint64 `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit   uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *List) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *List) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *List) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ProjectCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Targets   []string  `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	Command   string    `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Arguments []float64 `protobuf:"fixed64,4,rep,packed,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ProjectCommand) Reset() {
	*x = ProjectCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectCommand) ProtoMessage() {}

func (x *ProjectCommand) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectCommand.ProtoReflect.Descriptor instead.
func (*ProjectCommand) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectCommand) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectCommand) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ProjectCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ProjectCommand) GetArguments() []float64 {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type DeviceCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Command   string    `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Arguments []float64 `protobuf:"fixed64,3,rep,packed,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *DeviceCommand) Reset() {
	*x = DeviceCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCommand) ProtoMessage() {}

func (x *DeviceCommand) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCommand.ProtoReflect.Descriptor instead.
func (*DeviceCommand) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceCommand) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *DeviceCommand) GetArguments() []float64 {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *Event) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_plugin_plugin_proto protoreflect.FileDescriptor

var file_plugin_plugin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x72,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x57, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x64,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x32, 0x88, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x03, 0x67,
	0x65, 0x74, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0d,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32,
	0xa2, 0x01, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x23, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x32, 0x9d, 0x02, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x0a,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x26,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x69, 0x70, 0x65, 0x12, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x32, 0xef, 0x01, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x0a,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x26,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xb5, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x0d, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x2c, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x32, 0xf3,
	0x02, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x23, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x0a,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a,
	0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x0a, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a,
	0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x32, 0xa8, 0x03, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12,
	0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x23, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x26, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x1a, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x0d,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x1f, 0x0a, 0x11, 0x69, 0x6f, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x50, 0x01, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_plugin_proto_rawDescOnce sync.Once
	file_plugin_plugin_proto_rawDescData = file_plugin_plugin_proto_rawDesc
)

func file_plugin_plugin_proto_rawDescGZIP() []byte {
	file_plugin_plugin_proto_rawDescOnce.Do(func() {
		file_plugin_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_plugin_proto_rawDescData)
	})
	return file_plugin_plugin_proto_rawDescData
}

var file_plugin_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_plugin_plugin_proto_goTypes = []interface{}{
	(*Empty)(nil),          // 0: module.Empty
	(*String)(nil),         // 1: module.String
	(*Id)(nil),             // 2: module.Id
	(*Buffer)(nil),         // 3: module.Buffer
	(*List)(nil),           // 4: module.List
	(*ProjectCommand)(nil), // 5: module.ProjectCommand
	(*DeviceCommand)(nil),  // 6: module.DeviceCommand
	(*Event)(nil),          // 7: module.Event
}
var file_plugin_plugin_proto_depIdxs = []int32{
	3,  // 0: module.module.register:input_type -> module.Buffer
	1,  // 1: module.module.unregister:input_type -> module.String
	1,  // 2: module.session.create:input_type -> module.String
	1,  // 3: module.session.get:input_type -> module.String
	1,  // 4: module.session.delete:input_type -> module.String
	4,  // 5: module.user.list:input_type -> module.List
	2,  // 6: module.user.get:input_type -> module.Id
	2,  // 7: module.user.enable:input_type -> module.Id
	2,  // 8: module.user.disable:input_type -> module.Id
	4,  // 9: module.tunnel.list:input_type -> module.List
	2,  // 10: module.tunnel.get:input_type -> module.Id
	2,  // 11: module.tunnel.open:input_type -> module.Id
	2,  // 12: module.tunnel.close:input_type -> module.Id
	2,  // 13: module.tunnel.enable:input_type -> module.Id
	2,  // 14: module.tunnel.disable:input_type -> module.Id
	3,  // 15: module.tunnel.pipe:input_type -> module.Buffer
	4,  // 16: module.server.list:input_type -> module.List
	2,  // 17: module.server.get:input_type -> module.Id
	2,  // 18: module.server.open:input_type -> module.Id
	2,  // 19: module.server.close:input_type -> module.Id
	2,  // 20: module.server.enable:input_type -> module.Id
	2,  // 21: module.server.disable:input_type -> module.Id
	4,  // 22: module.product.list:input_type -> module.List
	1,  // 23: module.product.get:input_type -> module.String
	3,  // 24: module.product.import:input_type -> module.Buffer
	1,  // 25: module.product.export:input_type -> module.String
	4,  // 26: module.device.list:input_type -> module.List
	2,  // 27: module.device.get:input_type -> module.Id
	2,  // 28: module.device.open:input_type -> module.Id
	2,  // 29: module.device.close:input_type -> module.Id
	2,  // 30: module.device.enable:input_type -> module.Id
	2,  // 31: module.device.disable:input_type -> module.Id
	2,  // 32: module.device.refresh:input_type -> module.Id
	2,  // 33: module.device.context:input_type -> module.Id
	6,  // 34: module.device.execute:input_type -> module.DeviceCommand
	4,  // 35: module.project.list:input_type -> module.List
	2,  // 36: module.project.get:input_type -> module.Id
	2,  // 37: module.project.open:input_type -> module.Id
	2,  // 38: module.project.close:input_type -> module.Id
	2,  // 39: module.project.enable:input_type -> module.Id
	2,  // 40: module.project.disable:input_type -> module.Id
	2,  // 41: module.project.context:input_type -> module.Id
	5,  // 42: module.project.execute:input_type -> module.ProjectCommand
	3,  // 43: module.project.import:input_type -> module.Buffer
	1,  // 44: module.project.export:input_type -> module.String
	0,  // 45: module.module.register:output_type -> module.Empty
	0,  // 46: module.module.unregister:output_type -> module.Empty
	0,  // 47: module.session.create:output_type -> module.Empty
	3,  // 48: module.session.get:output_type -> module.Buffer
	0,  // 49: module.session.delete:output_type -> module.Empty
	3,  // 50: module.user.list:output_type -> module.Buffer
	3,  // 51: module.user.get:output_type -> module.Buffer
	0,  // 52: module.user.enable:output_type -> module.Empty
	0,  // 53: module.user.disable:output_type -> module.Empty
	3,  // 54: module.tunnel.list:output_type -> module.Buffer
	3,  // 55: module.tunnel.get:output_type -> module.Buffer
	0,  // 56: module.tunnel.open:output_type -> module.Empty
	0,  // 57: module.tunnel.close:output_type -> module.Empty
	0,  // 58: module.tunnel.enable:output_type -> module.Empty
	0,  // 59: module.tunnel.disable:output_type -> module.Empty
	3,  // 60: module.tunnel.pipe:output_type -> module.Buffer
	3,  // 61: module.server.list:output_type -> module.Buffer
	3,  // 62: module.server.get:output_type -> module.Buffer
	0,  // 63: module.server.open:output_type -> module.Empty
	0,  // 64: module.server.close:output_type -> module.Empty
	0,  // 65: module.server.enable:output_type -> module.Empty
	0,  // 66: module.server.disable:output_type -> module.Empty
	3,  // 67: module.product.list:output_type -> module.Buffer
	3,  // 68: module.product.get:output_type -> module.Buffer
	0,  // 69: module.product.import:output_type -> module.Empty
	3,  // 70: module.product.export:output_type -> module.Buffer
	3,  // 71: module.device.list:output_type -> module.Buffer
	3,  // 72: module.device.get:output_type -> module.Buffer
	0,  // 73: module.device.open:output_type -> module.Empty
	0,  // 74: module.device.close:output_type -> module.Empty
	0,  // 75: module.device.enable:output_type -> module.Empty
	0,  // 76: module.device.disable:output_type -> module.Empty
	0,  // 77: module.device.refresh:output_type -> module.Empty
	3,  // 78: module.device.context:output_type -> module.Buffer
	0,  // 79: module.device.execute:output_type -> module.Empty
	3,  // 80: module.project.list:output_type -> module.Buffer
	3,  // 81: module.project.get:output_type -> module.Buffer
	0,  // 82: module.project.open:output_type -> module.Empty
	0,  // 83: module.project.close:output_type -> module.Empty
	0,  // 84: module.project.enable:output_type -> module.Empty
	0,  // 85: module.project.disable:output_type -> module.Empty
	3,  // 86: module.project.context:output_type -> module.Buffer
	0,  // 87: module.project.execute:output_type -> module.Empty
	0,  // 88: module.project.import:output_type -> module.Empty
	3,  // 89: module.project.export:output_type -> module.Buffer
	45, // [45:90] is the sub-list for method output_type
	0,  // [0:45] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_plugin_plugin_proto_init() }
func file_plugin_plugin_proto_init() {
	if File_plugin_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugin_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_plugin_plugin_proto_goTypes,
		DependencyIndexes: file_plugin_plugin_proto_depIdxs,
		MessageInfos:      file_plugin_plugin_proto_msgTypes,
	}.Build()
	File_plugin_plugin_proto = out.File
	file_plugin_plugin_proto_rawDesc = nil
	file_plugin_plugin_proto_goTypes = nil
	file_plugin_plugin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModuleClient interface {
	Register(ctx context.Context, in *Buffer, opts ...grpc.CallOption) (*Empty, error)
	Unregister(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
}

type moduleClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleClient(cc grpc.ClientConnInterface) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) Register(ctx context.Context, in *Buffer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.module/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Unregister(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.module/unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServer is the server API for Module service.
type ModuleServer interface {
	Register(context.Context, *Buffer) (*Empty, error)
	Unregister(context.Context, *String) (*Empty, error)
}

// UnimplementedModuleServer can be embedded to have forward compatible implementations.
type UnimplementedModuleServer struct {
}

func (*UnimplementedModuleServer) Register(context.Context, *Buffer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedModuleServer) Unregister(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}

func RegisterModuleServer(s *grpc.Server, srv ModuleServer) {
	s.RegisterService(&_Module_serviceDesc, srv)
}

func _Module_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Buffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.module/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Register(ctx, req.(*Buffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.module/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Unregister(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

var _Module_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _Module_Register_Handler,
		},
		{
			MethodName: "unregister",
			Handler:    _Module_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/plugin.proto",
}

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionClient interface {
	Create(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *String, opts ...grpc.CallOption) (*Buffer, error)
	Delete(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
}

type sessionClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionClient(cc grpc.ClientConnInterface) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) Create(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.session/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) Get(ctx context.Context, in *String, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.session/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) Delete(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.session/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
type SessionServer interface {
	Create(context.Context, *String) (*Empty, error)
	Get(context.Context, *String) (*Buffer, error)
	Delete(context.Context, *String) (*Empty, error)
}

// UnimplementedSessionServer can be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (*UnimplementedSessionServer) Create(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSessionServer) Get(context.Context, *String) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSessionServer) Delete(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.session/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Create(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.session/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Get(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.session/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Delete(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Session_Create_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Session_Get_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Session_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/plugin.proto",
}

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error)
	Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.user/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.user/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.user/enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.user/disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	List(context.Context, *List) (*Buffer, error)
	Get(context.Context, *Id) (*Buffer, error)
	Enable(context.Context, *Id) (*Empty, error)
	Disable(context.Context, *Id) (*Empty, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) List(context.Context, *List) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedUserServer) Get(context.Context, *Id) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedUserServer) Enable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedUserServer) Disable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.user/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).List(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.user/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.user/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Enable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.user/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Disable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _User_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _User_Get_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _User_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _User_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/plugin.proto",
}

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelClient interface {
	List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error)
	Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Pipe(ctx context.Context, opts ...grpc.CallOption) (Tunnel_PipeClient, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.tunnel/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.tunnel/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.tunnel/open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.tunnel/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.tunnel/enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.tunnel/disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (Tunnel_PipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tunnel_serviceDesc.Streams[0], "/module.tunnel/pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelPipeClient{stream}
	return x, nil
}

type Tunnel_PipeClient interface {
	Send(*Buffer) error
	Recv() (*Buffer, error)
	grpc.ClientStream
}

type tunnelPipeClient struct {
	grpc.ClientStream
}

func (x *tunnelPipeClient) Send(m *Buffer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelPipeClient) Recv() (*Buffer, error) {
	m := new(Buffer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServer is the server API for Tunnel service.
type TunnelServer interface {
	List(context.Context, *List) (*Buffer, error)
	Get(context.Context, *Id) (*Buffer, error)
	Open(context.Context, *Id) (*Empty, error)
	Close(context.Context, *Id) (*Empty, error)
	Enable(context.Context, *Id) (*Empty, error)
	Disable(context.Context, *Id) (*Empty, error)
	Pipe(Tunnel_PipeServer) error
}

// UnimplementedTunnelServer can be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (*UnimplementedTunnelServer) List(context.Context, *List) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedTunnelServer) Get(context.Context, *Id) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTunnelServer) Open(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedTunnelServer) Close(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedTunnelServer) Enable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedTunnelServer) Disable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (*UnimplementedTunnelServer) Pipe(Tunnel_PipeServer) error {
	return status.Errorf(codes.Unimplemented, "method Pipe not implemented")
}

func RegisterTunnelServer(s *grpc.Server, srv TunnelServer) {
	s.RegisterService(&_Tunnel_serviceDesc, srv)
}

func _Tunnel_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.tunnel/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).List(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.tunnel/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.tunnel/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Open(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.tunnel/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Close(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.tunnel/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Enable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.tunnel/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Disable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).Pipe(&tunnelPipeServer{stream})
}

type Tunnel_PipeServer interface {
	Send(*Buffer) error
	Recv() (*Buffer, error)
	grpc.ServerStream
}

type tunnelPipeServer struct {
	grpc.ServerStream
}

func (x *tunnelPipeServer) Send(m *Buffer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelPipeServer) Recv() (*Buffer, error) {
	m := new(Buffer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Tunnel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _Tunnel_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Tunnel_Get_Handler,
		},
		{
			MethodName: "open",
			Handler:    _Tunnel_Open_Handler,
		},
		{
			MethodName: "close",
			Handler:    _Tunnel_Close_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Tunnel_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Tunnel_Disable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "pipe",
			Handler:       _Tunnel_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plugin/plugin.proto",
}

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error)
	Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.server/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.server/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.server/open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.server/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.server/enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.server/disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	List(context.Context, *List) (*Buffer, error)
	Get(context.Context, *Id) (*Buffer, error)
	Open(context.Context, *Id) (*Empty, error)
	Close(context.Context, *Id) (*Empty, error)
	Enable(context.Context, *Id) (*Empty, error)
	Disable(context.Context, *Id) (*Empty, error)
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) List(context.Context, *List) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedServerServer) Get(context.Context, *Id) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedServerServer) Open(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedServerServer) Close(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedServerServer) Enable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedServerServer) Disable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.server/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).List(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.server/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.server/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Open(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.server/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Close(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.server/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Enable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.server/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Disable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _Server_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Server_Get_Handler,
		},
		{
			MethodName: "open",
			Handler:    _Server_Open_Handler,
		},
		{
			MethodName: "close",
			Handler:    _Server_Close_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Server_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Server_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/plugin.proto",
}

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductClient interface {
	List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error)
	Get(ctx context.Context, in *String, opts ...grpc.CallOption) (*Buffer, error)
	Import(ctx context.Context, opts ...grpc.CallOption) (Product_ImportClient, error)
	Export(ctx context.Context, in *String, opts ...grpc.CallOption) (Product_ExportClient, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.product/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) Get(ctx context.Context, in *String, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.product/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) Import(ctx context.Context, opts ...grpc.CallOption) (Product_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Product_serviceDesc.Streams[0], "/module.product/import", opts...)
	if err != nil {
		return nil, err
	}
	x := &productImportClient{stream}
	return x, nil
}

type Product_ImportClient interface {
	Send(*Buffer) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type productImportClient struct {
	grpc.ClientStream
}

func (x *productImportClient) Send(m *Buffer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productImportClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productClient) Export(ctx context.Context, in *String, opts ...grpc.CallOption) (Product_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Product_serviceDesc.Streams[1], "/module.product/export", opts...)
	if err != nil {
		return nil, err
	}
	x := &productExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Product_ExportClient interface {
	Recv() (*Buffer, error)
	grpc.ClientStream
}

type productExportClient struct {
	grpc.ClientStream
}

func (x *productExportClient) Recv() (*Buffer, error) {
	m := new(Buffer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServer is the server API for Product service.
type ProductServer interface {
	List(context.Context, *List) (*Buffer, error)
	Get(context.Context, *String) (*Buffer, error)
	Import(Product_ImportServer) error
	Export(*String, Product_ExportServer) error
}

// UnimplementedProductServer can be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (*UnimplementedProductServer) List(context.Context, *List) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedProductServer) Get(context.Context, *String) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedProductServer) Import(Product_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (*UnimplementedProductServer) Export(*String, Product_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterProductServer(s *grpc.Server, srv ProductServer) {
	s.RegisterService(&_Product_serviceDesc, srv)
}

func _Product_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.product/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).List(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.product/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).Get(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServer).Import(&productImportServer{stream})
}

type Product_ImportServer interface {
	SendAndClose(*Empty) error
	Recv() (*Buffer, error)
	grpc.ServerStream
}

type productImportServer struct {
	grpc.ServerStream
}

func (x *productImportServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productImportServer) Recv() (*Buffer, error) {
	m := new(Buffer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Product_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServer).Export(m, &productExportServer{stream})
}

type Product_ExportServer interface {
	Send(*Buffer) error
	grpc.ServerStream
}

type productExportServer struct {
	grpc.ServerStream
}

func (x *productExportServer) Send(m *Buffer) error {
	return x.ServerStream.SendMsg(m)
}

var _Product_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _Product_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Product_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "import",
			Handler:       _Product_Import_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "export",
			Handler:       _Product_Export_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin/plugin.proto",
}

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceClient interface {
	List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error)
	Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Refresh(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Context(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error)
	Execute(ctx context.Context, in *DeviceCommand, opts ...grpc.CallOption) (*Empty, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.device/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.device/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.device/open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.device/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.device/enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.device/disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Refresh(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.device/refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Context(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.device/context", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Execute(ctx context.Context, in *DeviceCommand, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.device/execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
type DeviceServer interface {
	List(context.Context, *List) (*Buffer, error)
	Get(context.Context, *Id) (*Buffer, error)
	Open(context.Context, *Id) (*Empty, error)
	Close(context.Context, *Id) (*Empty, error)
	Enable(context.Context, *Id) (*Empty, error)
	Disable(context.Context, *Id) (*Empty, error)
	Refresh(context.Context, *Id) (*Empty, error)
	Context(context.Context, *Id) (*Buffer, error)
	Execute(context.Context, *DeviceCommand) (*Empty, error)
}

// UnimplementedDeviceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (*UnimplementedDeviceServer) List(context.Context, *List) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedDeviceServer) Get(context.Context, *Id) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDeviceServer) Open(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedDeviceServer) Close(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedDeviceServer) Enable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedDeviceServer) Disable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (*UnimplementedDeviceServer) Refresh(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedDeviceServer) Context(context.Context, *Id) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Context not implemented")
}
func (*UnimplementedDeviceServer) Execute(context.Context, *DeviceCommand) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterDeviceServer(s *grpc.Server, srv DeviceServer) {
	s.RegisterService(&_Device_serviceDesc, srv)
}

func _Device_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).List(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Open(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Close(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Enable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Disable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Refresh(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Context_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Context(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Context",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Context(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.device/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Execute(ctx, req.(*DeviceCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _Device_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _Device_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Device_Get_Handler,
		},
		{
			MethodName: "open",
			Handler:    _Device_Open_Handler,
		},
		{
			MethodName: "close",
			Handler:    _Device_Close_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Device_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Device_Disable_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _Device_Refresh_Handler,
		},
		{
			MethodName: "context",
			Handler:    _Device_Context_Handler,
		},
		{
			MethodName: "execute",
			Handler:    _Device_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/plugin.proto",
}

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectClient interface {
	List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error)
	Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Context(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error)
	Execute(ctx context.Context, in *ProjectCommand, opts ...grpc.CallOption) (*Empty, error)
	Import(ctx context.Context, opts ...grpc.CallOption) (Project_ImportClient, error)
	Export(ctx context.Context, in *String, opts ...grpc.CallOption) (Project_ExportClient, error)
}

type projectClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectClient(cc grpc.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) List(ctx context.Context, in *List, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.project/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.project/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Open(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.project/open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Close(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.project/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Enable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.project/enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Disable(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.project/disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Context(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Buffer, error) {
	out := new(Buffer)
	err := c.cc.Invoke(ctx, "/module.project/context", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Execute(ctx context.Context, in *ProjectCommand, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/module.project/execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Import(ctx context.Context, opts ...grpc.CallOption) (Project_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Project_serviceDesc.Streams[0], "/module.project/import", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectImportClient{stream}
	return x, nil
}

type Project_ImportClient interface {
	Send(*Buffer) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type projectImportClient struct {
	grpc.ClientStream
}

func (x *projectImportClient) Send(m *Buffer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectImportClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectClient) Export(ctx context.Context, in *String, opts ...grpc.CallOption) (Project_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Project_serviceDesc.Streams[1], "/module.project/export", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Project_ExportClient interface {
	Recv() (*Buffer, error)
	grpc.ClientStream
}

type projectExportClient struct {
	grpc.ClientStream
}

func (x *projectExportClient) Recv() (*Buffer, error) {
	m := new(Buffer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectServer is the server API for Project service.
type ProjectServer interface {
	List(context.Context, *List) (*Buffer, error)
	Get(context.Context, *Id) (*Buffer, error)
	Open(context.Context, *Id) (*Empty, error)
	Close(context.Context, *Id) (*Empty, error)
	Enable(context.Context, *Id) (*Empty, error)
	Disable(context.Context, *Id) (*Empty, error)
	Context(context.Context, *Id) (*Buffer, error)
	Execute(context.Context, *ProjectCommand) (*Empty, error)
	Import(Project_ImportServer) error
	Export(*String, Project_ExportServer) error
}

// UnimplementedProjectServer can be embedded to have forward compatible implementations.
type UnimplementedProjectServer struct {
}

func (*UnimplementedProjectServer) List(context.Context, *List) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedProjectServer) Get(context.Context, *Id) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedProjectServer) Open(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedProjectServer) Close(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedProjectServer) Enable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (*UnimplementedProjectServer) Disable(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (*UnimplementedProjectServer) Context(context.Context, *Id) (*Buffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Context not implemented")
}
func (*UnimplementedProjectServer) Execute(context.Context, *ProjectCommand) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedProjectServer) Import(Project_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (*UnimplementedProjectServer) Export(*String, Project_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterProjectServer(s *grpc.Server, srv ProjectServer) {
	s.RegisterService(&_Project_serviceDesc, srv)
}

func _Project_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).List(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Open(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Close(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Enable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Disable(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Context_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Context(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/Context",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Context(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.project/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Execute(ctx, req.(*ProjectCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectServer).Import(&projectImportServer{stream})
}

type Project_ImportServer interface {
	SendAndClose(*Empty) error
	Recv() (*Buffer, error)
	grpc.ServerStream
}

type projectImportServer struct {
	grpc.ServerStream
}

func (x *projectImportServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectImportServer) Recv() (*Buffer, error) {
	m := new(Buffer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Project_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServer).Export(m, &projectExportServer{stream})
}

type Project_ExportServer interface {
	Send(*Buffer) error
	grpc.ServerStream
}

type projectExportServer struct {
	grpc.ServerStream
}

func (x *projectExportServer) Send(m *Buffer) error {
	return x.ServerStream.SendMsg(m)
}

var _Project_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.project",
	HandlerType: (*ProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _Project_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Project_Get_Handler,
		},
		{
			MethodName: "open",
			Handler:    _Project_Open_Handler,
		},
		{
			MethodName: "close",
			Handler:    _Project_Close_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Project_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Project_Disable_Handler,
		},
		{
			MethodName: "context",
			Handler:    _Project_Context_Handler,
		},
		{
			MethodName: "execute",
			Handler:    _Project_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "import",
			Handler:       _Project_Import_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "export",
			Handler:       _Project_Export_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin/plugin.proto",
}
